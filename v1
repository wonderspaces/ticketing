{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import datetime\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [],
   "source": [
    "# get ticket data.  Showclix reports have 10 rows of metadata.\n",
    "\n",
    "ticket_data = pd.read_csv(\"./downloads/TicketDetailReport_TEST.csv\",skiprows=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [],
   "source": [
    "visitors_per_window = 36\n",
    "\n",
    "windows_per_hour = 4\n",
    "\n",
    "weekday_entry_hours = 10.75\n",
    "weekend_entry_hours = 11.25\n",
    "\n",
    "sun_thu_occupancy = visitors_per_window * windows_per_hour * weekday_entry_hours\n",
    "fri_sat_occupancy = visitors_per_window * windows_per_hour * weekend_entry_hours\n",
    "\n",
    "opening_weekend_occupancy = sun_thu_occupancy + 2 * fri_sat_occupancy\n",
    "#print(opening_weekend_occupancy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ticket_data.head()\n",
    "# ticket_data.columns\n",
    "# ticket_data.count()\n",
    "# remove cancelled tickets\n",
    "ticket_data = ticket_data[ticket_data['Ticket Status'] != 'Canceled'] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Adult - First Access 20% off                          129\n",
       "Student / Senior / Military - First Access 20% off     57\n",
       "Children 3-12 - First Access 20% off                    8\n",
       "Name: Price Level Name, dtype: int64"
      ]
     },
     "execution_count": 166,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ticket_data['Price Level Name'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ticket_data.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Adult - First Access 20% off                          0.664948\n",
       "Student / Senior / Military - First Access 20% off    0.293814\n",
       "Children 3-12 - First Access 20% off                  0.041237\n",
       "Name: Price Level Name, dtype: float64"
      ]
     },
     "execution_count": 167,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ticket_data['Price Level Name'].value_counts(normalize=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ticket_data['Price Level Name'].value_counts(normalize=True).values()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "labels = ticket_data['Price Level Name'].unique()\n",
    "sizes = ticket_data['Price Level Name'].value_counts(normalize=True).values\n",
    "\n",
    "fig1, ax1 = plt.subplots()\n",
    "ax1.pie(sizes, labels=labels, autopct='%1.1f%%',\n",
    "        shadow=True, startangle=90)\n",
    "ax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n",
    "\n",
    "plt.title(\"Ticket types\")\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "opening weekend tickets sold (including fri): 97\n",
      "occupancy percentage for opening weekend:\n",
      "first weekend: 56\n",
      "second_weekend: 28\n",
      "weekend: 84\n",
      "weekday: 110\n",
      "matinee: 53\n",
      "total: 194\n"
     ]
    }
   ],
   "source": [
    "# ticket_data['Event Start']\n",
    "# todays_date = datetime.datetime.today()\n",
    "# todays_date.weekday()\n",
    "\n",
    "\n",
    "# see how many ticket are for weekends\n",
    "# see how many tickets are for weekdays\n",
    "# see how many tickets are for the first weekend, second weekend\n",
    "# see how many tickets are for before 5pm and how many after 5pm\n",
    "\n",
    "is_opening_weekend = []  # for first friday, saturday, and sunday\n",
    "\n",
    "is_weekend = []\n",
    "is_weekday = []\n",
    "\n",
    "is_first_weekend = []\n",
    "is_second_weekend = []\n",
    "\n",
    "is_matinee = []\n",
    "\n",
    "\n",
    "for index, row in ticket_data.iterrows():\n",
    "    entrance_datetime = row['Event Start'].split(' ')\n",
    "    entrance_time = entrance_datetime[1]\n",
    "    entrance_hour = entrance_time.split(':')[0]\n",
    "    \n",
    "    entrance_month = entrance_datetime[0].split('/')[0]\n",
    "    entrance_day = entrance_datetime[0].split('/')[1]\n",
    "    \n",
    "    #check if opening date matches to first fri, sat, sun and add 0 or 1 accordingly\n",
    "    if entrance_month == '04' and entrance_day in ['05','06','07']:\n",
    "        is_opening_weekend.append(1)\n",
    "    else:\n",
    "        is_opening_weekend.append(0)\n",
    "        \n",
    "    #check if opening date matches to first fri, sat, sun and add 0 or 1 accordingly\n",
    "    if entrance_month == '04' and entrance_day in ['06','07']:\n",
    "        \n",
    "        is_weekend.append(1)\n",
    "        is_weekday.append(0)\n",
    "        is_first_weekend.append(1)\n",
    "        is_second_weekend.append(0)\n",
    "        is_matinee.append(0)\n",
    "        \n",
    "    elif entrance_month == '04' and entrance_day in ['13','14']:\n",
    "    \n",
    "        is_weekend.append(1)\n",
    "        is_weekday.append(0)\n",
    "        is_first_weekend.append(0)\n",
    "        is_second_weekend.append(1)\n",
    "        is_matinee.append(0)\n",
    "    \n",
    "    elif entrance_hour not in ['5','6','7','8','9']:\n",
    "        \n",
    "        is_weekend.append(0)\n",
    "        is_weekday.append(1)\n",
    "        is_first_weekend.append(0)\n",
    "        is_second_weekend.append(0)\n",
    "        is_matinee.append(1)\n",
    "        \n",
    "    else:\n",
    "        \n",
    "        is_weekend.append(0)\n",
    "        is_weekday.append(1)\n",
    "        is_first_weekend.append(0)\n",
    "        is_second_weekend.append(0)\n",
    "        is_matinee.append(0)\n",
    "        \n",
    "print('opening weekend tickets sold (including fri):',is_opening_weekend.count(1))\n",
    "print('occupancy percentage for opening weekend:',)\n",
    "print('first weekend:',is_first_weekend.count(1))\n",
    "print('second_weekend:',is_second_weekend.count(1))\n",
    "print('weekend:',is_weekend.count(1)) \n",
    "print('weekday:',is_weekday.count(1))\n",
    "print('matinee:',is_matinee.count(1))\n",
    "print('total:',len(is_weekday))\n",
    "\n",
    "#ticket_data.assign(is_weekday = is_weekday)\n",
    "#ticket_data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "#ticket_data.assign(is_weekend = is_weekend)\n",
    "#ticket_data.assign(is_weekday = is_weekday)\n",
    "#ticket_data.assign(is_opening_weekend = is_opening_weekend)\n",
    "\n",
    "#ticket_data['is_opening_weekend'].value_counts(normalize=True)\n",
    "#ticket_data['is_weekday'].value_counts(normalize=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Opening weekend is currently 2.0 % sold\n"
     ]
    }
   ],
   "source": [
    "# find opening weekend occupancy \n",
    "opening_weekend_occupancy_rate = round(is_opening_weekend.count(1) / opening_weekend_occupancy,3) * 100\n",
    "print('Opening weekend is currently',opening_weekend_occupancy_rate,'% sold')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
